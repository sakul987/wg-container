#!/bin/bash
set -e

[[ $UID != 0 ]] && exec sudo -E "$(readlink -f "$0")" "$@"

up() {
    if [ -n "$1" ]; then
        server="$1"
        if [[ $isMulti == true ]]; then
            netnsName=$server
        else
            netnsName="vpn"
        fi

        ip netns add $netnsName
        ip netns exec $netnsName ip addr add 127.0.0.1/8 dev lo
        ip netns exec $netnsName ip link set lo up
        ip link add "${netnsName}d" type veth peer name "${netnsName}s"
        ip link set "${netnsName}d" up
        ip link set "${netnsName}s" netns $netnsName up
        #TODO - ip addr
        ip addr add 10.200.200.1/24 dev "${netnsName}d"
        ip netns exec $netnsName ip addr add 10.200.200.2/24 dev "${netnsName}s"
        ip netns exec $netnsName ip route add default via 10.200.200.1 dev "${netnsName}s"
        iptables -t nat -A POSTROUTING -s 10.200.200.0/24 -o $interface -j MASQUERADE
        mkdir -p "/etc/netns/$netnsName"
        sh -c "echo 'nameserver 9.9.9.9' > /etc/netns/$netnsName/resolv.conf"
        ip netns exec $netnsName wg-quick up $server
        ufw route allow in on "${netnsName}d" out on $interface
        ufw reload
    else
        echo "Enter wireguard config name"
    fi
}

down() {
    if [ -n "$1" ]; then
        server="$1"
        if [[ $isMulti == true ]]; then
            netnsName=$server
        else
            netnsName="vpn"
        fi

        ufw route delete allow in on "${netnsName}d" out on $interface
        iptables -t nat -D POSTROUTING -s 10.200.200.0/24 -o $interface -j MASQUERADE
        ip netns exec $netnsName wg-quick down $server
        rm -r "/etc/netns/$netnsName"
        ip link delete "${netnsName}d"
        ip netns delete $netnsName
        ufw reload
    else
        echo "Enter wireguard config name"
    fi
}

execi() {
    if [[ $isMulti == true ]]; then
        netnsName="$1"
        shift
    else
        netnsName="vpn"
    fi

    exec ip netns exec $netnsName sudo -E -u \#${SUDO_UID:-$(id -u)} -g \#${SUDO_GID:-$(id -g)} -- "$@" &
    wait $!
}

direct() {
    isMulti=true;

    server="$1"
    shift

    up "$server"

    set +e
    execi "$@"

    set -e
    down "$server"
}

showhelp() {
    echo "Commands:"
    echo "  wg-container up <flags> <configName>                 # Start VPN connection to <configName>"
    echo "  wg-container exec <flags> <configName?> <command>                  # Execute <command> in the VPN namespace"
    echo "  wg-container down <flags> <configName>               # Stop VPN connection to <configName>"
    echo "  wg-container direct <flags> <configName> <command>   # Run <command> in <configName> without starting or stopping it"
    echo "  wg-container help                                    # Print this help text"
    echo "Flags:"
    echo "  -i <interface>  # Set the used network interface. Default is \"enp5s0\""
    echo "  -v              # Enable verbose mode / get more debug info"
    echo "  -h              # Print this help text"
    exit 0
}

command="$1"
shift

interface="enp5s0"

while getopts "i:vhm" flag; do
  case $flag in
    i)  interface=$OPTARG ;;
    v)  set -x ;;
    h)  showhelp ;;
    m)  isMulti=true;;
  esac
done

shift $((OPTIND-1))

case "$command" in
    up) up "$@" ;;
    down) down "$@" ;;
    exec) execi "$@" ;;
    direct) direct "$@" ;;
    help)   showhelp ;;
    *) echo "Usage: $0 up|down|exec|direct" >&2; exit 1 ;;
esac